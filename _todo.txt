* Show more of the picture by taking the pie width into account - make it go 0-100% in the x axis based on image width - pie width

* Taking a picture should only let you tap on kaleidoscope image (not white space around it)

* Put captured images in their own album

* Settings

* Repeated images - not just a single circle's worth
* https://developer.apple.com/library/archive/documentation/GraphicsImaging/Reference/CoreImageFilterReference/index.html#//apple_ref/doc/filter/ci/CIBumpDistortionLinear
  + CIBumpDistortion
  + CITorusLensDistortion

* Put app on the app store

KAL-23-16: 2023/11/01 - SwiftLint
* Check SwiftLint violations; make sure to check tests too
* Rotation at 0/360 has a jump - made x oscillate back and forth between 0 and half the width (so pie can't actually reach the far right)
* Parameterize tests

KAL-23-14: 2023/10/31 - To Photo Library
* Refactor so CapturingView owns the captured view
* Save to photo album from live camera or photo view

KAL-23-13: 2023/10/30 - Screen Capture
* Put the camera tab first (to ensure easier initial interaction)
* Starter photo on photo view
* Tap to take picture of the current kaleidoscope image
* Animate snapshot moving to corner
* Click (audible) when picture taken
  + https://stackoverflow.com/questions/59404039/how-to-play-audio-using-avaudioplayer-in-swiftui-project
  + https://mixkit.co/free-sound-effects/camera/
  + https://github.com/TUNER88/iOSSystemSoundsLibrary
  + https://stackoverflow.com/questions/31126124/using-existing-system-sounds-in-ios-app-swift
* Installed SwiftLint


KAL-23-12: 2023/10/26 - Capture Images
* Spike - capture a snapshot of an image to a UIImage
* Removed simulator gesture rotation
* https://www.hackingwithswift.com/quick-start/swiftui/how-to-convert-a-swiftui-view-to-an-image
* Spike how to capture a view when tapped

KAL-23-11: 2023/10/25 - Independent Images
Live camera
* Simplified the conversion a little and switched to jpeg; this moves performance to an acceptable level.
* Old article: developer.apple.com/library/archive/qa/qa1702/
* Copy image buffer, release it in the main queue - https://developer.apple.com/documentation/coremedia/cmsamplebuffer-u71
* Track which tab we're on
* Turn on camera capture when entering camera tag, off when leaving
* Make RotatedView a top-level view, to avoid tabs with different rotations interfering with each other

KAL-23-10: 2023/10/24 - Camera to UIImage
Live camera
* Show image & camera
* Converted image to PNG to isolate it from the video buffers
* Noted that the conversion was slow

KAL-23-09: 2023/10/23 - Camera
Live camera
* Convert live feed to series of images (haven't seen yet)
* Got camera showing live feed on iPad screen
* Added camera permission to info.plist
* Used stackoverflow answer with hints from kodeco to get camera working

* Research:
  + https://www.neuralception.com/detection-app-tutorial-camera-feed/
  + https://stackoverflow.com/questions/59062886/how-to-using-realtime-camera-streaming-in-swiftui
  + https://www.kodeco.com/26244793-building-a-camera-app-with-swiftui-and-combine?page=1#toc-anchor-001

KAL-23-08: 2023/10/05 - Select a Photo
* Split out PhotoSelector and PhotoKaleidoscope from ContentView
* Select photo
* Split up PhotoKaleidoscope - eg a RotationView and insides

KAL-23-07: 2023/10/4 - Tangled Up in Boundaries
* Image still cuts off around the edges sometimes
* Get rid of offsets (like "+ 5.0") in Angle+toXY - did this with negative padding - that fixed the edges being cut off
* Modify toXOffset and toYOffset to make sure they put pie inside the view; update tests
* Use PhotosPicker to let user find photo; we don't yet use it

KAL-23-06: 2023/10/03 - Respecting Boundaries
* Set up an Experiment tab
* Empirically reworked Angle+toXY() to keep pie in bounds
* Realized we're moving the picture AND the Tab View changes the picture size, pushing us out of bounds on the main view (even though the experiment was ok)
* Changed Experiment to move image underneath the pie

KAL-23-05: 2023/10/02 - Rotation or File Selection
* Rotate device - yaw sets the angle of rotation


KAL-23-04: 9/28/23 - Map Rotation to x/y
* Map rotation angle to a combination of x and y
* Adjust pie calculations to avoid affine transformations
* Adjusted top-level to tell number of mirrored segments rather than counting segment and its mirror separately
* Pull out angle methods from ContentView
* Test repeats on AngleToXY

KAL-23-03: 9/27/23 - Motion
* Move - add a drag gesture that relocates the point of interest
* Explored drag, rotate, and scale gestures
* Started mapping rotation to x/y

KAL-23-02: 9/26/23 - Mirroring
* Make kaleidoscope image - mirrored
* With a fixed image

KAL-23-01: 9/25/23 - Introducing Kaleid
* Get a pie-shaped piece of Color
* Clipped a photo to pie shape but didn't get the whole pie
